#!/usr/bin/env roseus

;; get-distance-wall-x function includes ros::spin

(defun get-instruct-info ()
  ;; Assuming that is_flag is True
  (let* ((prev_count (send *instruct-msg* :called_count))
	 (cur_count prev_count))
    (ros::subscribe *interact-sub-topic* deco_with_fetch::InstructInfo #'instruct-cb)
    (while (= prev_count cur_count)
      (ros::spin-once)
      (ros::sleep)
      (setq cur_count (send *instruct-msg* :called_count)))
    (ros::unsubscribe *interact-sub-topic*)
    ))

(defun move-end-pos-instruct (move_vec)
  (let* ((move_vec move_vec)
	 (move_scale 1.0) (ik_res nil))
    (format t "- move arm: ~A~%" move_vec)
    (if (< (elt move_vec 1) 0)
	(send *fetch* :rarm :move-end-pos
	      (float-vector (* -1 (/ (norm move_vec) 3.0)) 0 0) :world)
      (send *fetch* :rarm :move-end-pos
	    (float-vector (/ (norm move_vec) 4.0) 0 0) :world))
    (while (and (not ik_res) (> move_scale 0.0))
      (setq ik_res (send *fetch* :rarm :move-end-pos move_vec :world))
      (when (not ik_res)
	(setq move_scale (- move_scale 0.1))
	(setq move_vec (scale move_scale move_vec))
	))
    (send-robot 4000)
    (when (< move_scale 1.0)
      (publish-eyebrows-expression 5)
      (format t "ごめんなさい、これ以上動かせないです~%")
      (send *ri* :speak-jp "ごめんなさい、これ以上動かせないです"))
    ))

(defun move-arm-instruct ()
  (let* ((move_vec #f(0 0 0))
	 (move_scale_int -1))
    (when (send *instruct-msg* :move_up)
      (setq move_vec (v+ move_vec #f(0 0 100))))
    (when (send *instruct-msg* :move_down)
      (setq move_vec (v- move_vec #f(0 0 100))))
    (when (send *instruct-msg* :move_left)
      (setq move_vec (v+ move_vec #f(0 100 0))))
    (when (send *instruct-msg* :move_right)
      (setq move_vec (v- move_vec #f(0 100 0))))

    (setq move_scale_int (send *instruct-msg* :move_degree))
    (when (= move_scale_int 0)
      (setq move_vec (scale 0.5 move_vec)))
    (when (= move_scale_int 1)
      (setq move_vec (scale 2.0 move_vec)))

    (move-end-pos-instruct move_vec)
    ))

(defun pass-decoration ()
  (set-before-catch-pose)
  (send-robot 4000)
  (format t "お願いします~%")
  (send *ri* :speak-jp "お願いします")
  (ros::duration-sleep 4.0)
  (send *ri* :speak-jp "離しますよ")
  (send *ri* :stop-grasp)
  (ros::duration-sleep 3.0)
  ))

(defun interact-human-to-robot ()
  (let* ((is_finish_flag nil)
	 (speak_msg))
    (while (not is_finish_flag)
      (setq speak_msg (send *instruct-msg* :message))
      (when (equal speak_msg "風船を動かします")
	(move-arm-instruct)
	(format t "この辺で良いですか？~%")
	(send *ri* :speak-jp "この辺で良いですか？"))
      (when (equal speak_msg "上下左右どちらに動かしたら良いですか？")
	(format t "上下左右どちらに動かしたら良いですか？~%")
	(send *ri* :speak-jp speak_msg))
      (get-instruct-info)
      (setq is_finish_flag (send *instruct-msg* :is_finish)))
    (setq speak_msg (send *instruct-msg* :message))
    (when (equal speak_msg "代わりに置いてもらえますか？")
      (format t "代わりに置いてもらえますか？~%")
      (publish-eyebrows-expression 5)
      (send *ri* :speak-jp "すみません、風船を渡すので代わりに置いてもらえませんか？一度下がってから風船を渡しますね")
      (ros::duration-sleep 1.0)
      (send *fetch* :rarm :move-end-pos #f(-100 0 0) :world)
      (send-robot 2000)
      (send *fetch* :rarm :move-end-pos #f(-50 0 0) :world)
      (send-robot 2000)
      (setq *pass-to-human-flag* t))
    (switch-chat-mode nil)
    ))

(defun test-interact ()
  (init-global-param)
  (switch-chat-mode t)
  (before-push-pose)
  (get-instruct-info)
  (interact-human-to-robot)
  )


