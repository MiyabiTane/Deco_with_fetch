#!/usr/bin/env roseus

(setq *sp-screenpoint-pub-topic* "/screen_point/input/screenpoint")
(setq *sp-points-pub-topic* "/screen_point/input/points")
(setq *sp-sub-topic* "/pointcloud_screenpoint_nodelet/output_point")
(setq *plane-norm-sub-topic* "/plane_normal_vector/output")

(ros::advertise *sp-screenpoint-pub-topic* geometry_msgs::PointStamped 1)
(ros::advertise *sp-points-pub-topic* sensor_msgs::PointCloud2 1)
(ros::rate 10)

(defun send-robot (wait_time)
  (send *ri* :angle-vector (send *fetch* :angle-vector) wait_time)
  (send *ri* :wait-interpolation)
  )

(defun get-arm-end-pos ()
  (let* ((arm_end_pos))
    (setq arm_end_pos (send (send (send *fetch* :rarm :end-coords) :copy-worldcoords) :pos))
    arm_end_pos)
  )

(defun go-vel-rotate (move_rad)  ;; move_rad[rad] move_time[s]
  (send *ri* :go-velocity 0 0 move_rad)
  (send *ri* :wait-interpolation)
  )

(defun go-vel-linear (move_x move_time)  ;; move_x[m] move_time[s]
  (send *ri* :go-velocity (/ move_x move_time) 0 0 (* 1000 move_time) :wait t)
  (send *ri* :wait-interpolation)
  )

(defun screen-pos-cb (msg)
  (setq coords (make-coords :pos (ros::tf-point->pos (send msg :point))))
  (send coords :transform
	(send *tfl* :lookup-transform *base-frame* *camera-frame* (ros::time 0)) :world)
  (setq result_3d_pos (send coords :pos))
  (setq cur_x (elt result_3d_pos 0))
  (when (not (= pre_x cur_x))
    (setq flag 1)
    (setq pre_x cur_x))
  )

(defun convert-2D->3D (x y points_msg)
  ;; points_msg: pointcloud info
  ;; use pointcloud_screenpoint_nodelet
  ;; result 3D pos: result_3d_pos
  (let* ((x x) (y y) (points_msg points_msg)
	 (pub_xy_msg (instance geometry_msgs::PointStamped :init)))
    (ros::subscribe *sp-sub-topic* geometry_msgs::PointStamped #'screen-pos-cb)
    (send pub_xy_msg :header :stamp (ros::time-now))
    (send pub_xy_msg :header :frame_id *camera-frame*)
    (send (send pub_xy_msg :point) :x x)
    (send (send pub_xy_msg :point) :y y)
    (setq flag 0)
    (while (= flag 0)
      (ros::publish *sp-screenpoint-pub-topic* pub_xy_msg)
      (ros::publish *sp-points-pub-topic* points_msg)
      (ros::spin-once)
      (ros::sleep))
    (ros::unsubscribe *sp-sub-topic*)
    )
  )

(defun convert-2D->points-msg (x y points_msg)
  (let* ((point_msg (instance geometry_msgs::Point :init)))
    (convert-2D->3D x y points_msg)
    (format t "~A~%" result_3d_pos)
    (send point_msg :x (elt result_3d_pos 0))
    (send point_msg :y (elt result_3d_pos 1))
    (send point_msg :z (elt result_3d_pos 2))
    point_msg)
  )

(defun plane-norm-cb (msg)
  (let* ((poses_msg (send msg :poses)))
    (setq norm_coords_lst '())
    (setq norm_rpy_lst '())
    (when (> (length poses_msg) 0)
      (dotimes (i (length poses_msg))
	(setq pose_msg (elt poses_msg i))
	(setq pos_msg (send pose_msg :position))
	(setq vec_msg (send pose_msg :orientation))
	(setq norm_coords (send (send *tfl* :lookup-transform *base-frame* *camera-frame* (ros::time 0))
				:transform (ros::tf-pose->coords pose_msg)))
	;; (format t "norm_coords: ~A~%" norm_coords)
	;; (format t "pos: ~A, rot: ~A~%" (send norm_coords :pos) (send norm_coords :rot))
	(setq norm_rpy (elt (rpy-angle (send norm_coords :rot)) 0))
	;; (format t "norm_rpy: ~A~%" norm_rpy)
	(setq norm_coords_lst (append norm_coords_lst (list norm_coords)))
	(setq norm_rpy_lst (append norm_rpy_lst (list norm_rpy)))
	))
    ))

(defun get-plane-norm-vec (norm_rpy)
  (let* ((base_box (make-cube 50 50 50))
	 (virtual_box (make-cube 50 50 50))
	 (vbox_pos)
	 (norm_rpy norm_rpy))
    (send virtual_box :locate #f(0 0 500) :world)
    (send base_box :assoc virtual_box)
    (send base_box :newcoords (make-coords :rpy norm_rpy))
    (setq vbox_pos (send (send virtual_box :copy-worldcoords) :pos))
    (format t "vbox_pos ~A~%" vbox_pos)
    (list (elt vbox_pos 0) (elt vbox_pos 1) (elt vbox_pos 2)))
  )

(defun rotate-ref-box ()
  (setq vbox_ypos (elt (get-plane-norm-vec (elt norm_rpy_lst 0)) 1))
  (if (> vbox_ypos 0)
      (go-vel-rotate (/ pi 10))
    (go-vel-rotate (* -1 (/ pi 10))))
  )

(defun rotate-ref-wall ()
  (ros::subscribe *plane-norm-sub-topic* geometry_msgs::PoseArray #'plane-norm-cb)
  (setq vbox_ypos 100)
  (while (> (abs vbox_ypos) 50)
    (setq pose_msg nil)
    (while (not pose_msg)
      (ros::spin-once)
      (ros::sleep))
    (rotate-ref-box))
  (ros::unsubscribe *plane-norm-sub-topic*)
  )

