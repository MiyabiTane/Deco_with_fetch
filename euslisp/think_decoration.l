#!/usr/bin/env roseus

(setq *deco-req-topic* "/think_deco")

(defun debug-view-place-pos (i)
  (let* ((pos (elt *place-pos-lst* i))
	 (box (make-cube 50 50 50)))
    (send box :locate pos :world)
    (objects (list *fetch* box))
    ))

(defun set-pub-msg ()
  (let* ((deco_box) (box_cd_lst) (pos) (dims) (pos_msg) (dims_msg)
	 (req_uv_msg) (xs_ys_lst))
    (send *dimg-req-msg* :header :stamp (ros::time-now))
    (dotimes (i (length *bboxes*))
      (setq deco_box (elt *bboxes* i))

      (setq box_cd_lst (bbox->lst deco_box))
      (setq pos (send (elt box_cd_lst 0) :pos))
      (setq dims (elt box_cd_lst 1))
      (format t "pos: ~A, dims ~A~%" pos dims)
      (setq *catch-pos-lst* (append *catch-pos-lst* (list pos)))
      (setq pos_msg (instance geometry_msgs::Point :init))
      (setq dims_msg (instance geometry_msgs::Point :init))
      (send pos_msg :x (elt pos 0))
      (send pos_msg :y (elt pos 1))
      (send pos_msg :z (elt pos 2))
      (send dims_msg :x (elt dims 0))
      (send dims_msg :y (elt dims 1))
      (send dims_msg :z (elt dims 2))
      (send *dimg-req-msg* :decos_pos (append (send *dimg-req-msg* :decos_pos) (list pos_msg)))
      (send *dimg-req-msg* :decos_dims (append (send *dimg-req-msg* :decos_dims) (list dims_msg)))

      (setq rec_uv_msg (instance jsk_recognition_msgs::PlotData :init))
      (setq xs_ys_lst (get-corner-uv pos dims))
      (send rec_uv_msg :xs (elt xs_ys_lst 0))
      (send rec_uv_msg :ys (elt xs_ys_lst 1))
      (send *dimg-req-msg* :decos_rec_uv (append (send *dimg-req-msg* :decos_rec_uv) (list rec_uv_msg)))
      )
    ))

(defun store-result (result_pos)
  (let* ((x) (y) (result_arr)
	 (fetch_pose (send *ri* :state :potentio-vector)))
    (setq result_arr (send result_pos :poses))
    (setq pre_x -1)
    (make-reset-pose)  ;; to convert 2D->3D accurately
    (dotimes (i (length result_arr))
      (setq x (send (send (elt result_arr i) :position) :x))
      (setq y (send (send (elt result_arr i) :position) :y))
      (format t "x: ~A, y: ~A~%" x y)
      (setq *place-uv-pos-lst* (append *place-uv-pos-lst* (list (list x y))))
      ;; use point_cloud of wall
      (setq result_3d_pos nil)
      (while (not result_3d_pos)
	(convert-2D->3D x y *wall-pcl*))
      (setq *place-pos-lst* (append *place-pos-lst* (list result_3d_pos))))
    (format t "== place_pos_lst: ~A~%" *place-pos-lst*)
    ;; (send *fetch* :angle-vector fetch_pose)
    ;; (send-robot 4000)
    ))

(defun print-pub-info ()
  (let* ((bimg_lt_pos (send *dimg-req-msg* :bimg_lt_pos))
	 (bimg_rb_pos (send *dimg-req-msg* :bimg_rb_pos))
	 (bimg_lt_uv (send *dimg-req-msg* :bimg_lt_uv))
	 (bimg_rb_uv (send *dimg-req-msg* :bimg_rb_uv))
	 (decos_pos (send *dimg-req-msg* :decos_pos))
	 (decos_dims (send *dimg-req-msg* :decos_dims))
	 (decos_rec_uv (send *dimg-req-msg* :decos_rec_uv)))
    (format t "~%")
    (format t "- dimg_lt_pos ~A ~A ~A~%"
	    (send bimg_lt_pos :x) (send bimg_lt_pos :y) (send bimg_lt_pos :z))
    (format t "- dimg_rb_pos ~A ~A ~A~%"
	    (send bimg_rb_pos :x) (send bimg_rb_pos :y) (send bimg_rb_pos :z))
    (format t "- dimg_lt_uv ~A ~A~%" (send bimg_lt_uv :x) (send bimg_lt_uv :y))
    (format t "- dimg_rb_uv ~A ~A~%" (send bimg_rb_uv :x) (send bimg_rb_uv :y))
    (format t "- decos_pos~%")
    (dolist (deco_pos decos_pos)
      (format t "  - ~A ~A ~A~%" (send deco_pos :x) (send deco_pos :y) (send deco_pos :z)))
    (format t "- decos_dim~%")
    (dolist (deco_dims decos_dims)
      (format t "  - ~A ~A ~A~%" (send deco_dims :x) (send deco_dims :y) (send deco_dims :z)))
    (format t "- decos_rec_uv~%")
    (dolist (deco_rec_uv decos_rec_uv)
      (format t "  - xs: ~A~%" (send deco_rec_uv :xs))
      (format t "  - ys: ~A~%" (send deco_rec_uv :ys)))
    ))

(defun think-decoration ()
  (let* ((result_msg))
    (set-pub-msg)
    (print-pub-info)
    (format t "waiting service ...~%")
    (ros::wait-for-service *deco-req-topic*)
    (setq result_msg (ros::service-call *deco-req-topic* *dimg-req-msg*))
    (format t "got service result~%")
    (store-result (send result_msg :result_pos))
    ))

