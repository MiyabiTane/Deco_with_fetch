#!/usr/bin/env roseus

(defun inv-from-reset-pose (target_pos)
  (send *fetch* :reset-pose)
  (setq target_coords (make-coords :pos target_pos))
  (send *fetch* :inverse-kinematics target_coords)
  )

(defun get-distance-wall ()
  (let* ((wall_x)
	 (wall_pcl
	  (one-shot-subscribe *head-camera-points*
			      sensor_msgs::PointCloud2 :after-stamp (ros::time-now))))
    (convert-2D->3D 320 240 wall_pcl)
    (setq wall_x (elt result_3d_pos 0))
    (format t "wall_x: ~A~%" wall_x)
    wall_x)
  )

(defun before-catch-pose ()
  (inv-from-reset-pose #f(550 100 500))
  (send *fetch* :rarm :wrist-r :joint-angle -34.22)
  (send-robot 4000)
  (send *ri* :stop-grasp)
  )

(defun before-push-pose ()
  (inv-from-reset-pose #f(400 -400 450))
  (send *fetch* :rarm :wrist-p :joint-angle 9)
  (send *fetch* :rarm :elbow-p :joint-angle 120)
  (send *fetch* :rarm :wrist-r :joint-angle 92.7005)
  ;; (get-arm-end-pos) -> #f(198.517 -613.427 761.268)
  (send-robot 4000)
  )

(defun catch-balloon (thresh)
  ;; thresh: diff between ideal and real [cm]
  (let* ((diff_width 0)
	 (real_width)
	 (ideal_width 0.1)
	 (grasp-result))
    (while (and (< diff_width thresh) (> ideal_width 0))
      (setq ideal_width (- ideal_width 0.01))
      (setq grasp-result (send *ri* :go-grasp :pos ideal_width))
      (setq real_width (send grasp-result :position))
      (setq diff_width (- ideal_width real_width))
      (format t "diff_width: ~A~%" diff_width)
      (ros::duration-sleep 0.5))
    (send *fetch* :reset-pose)
    (send *fetch* :rarm :move-end-pos #f(100 -100 0) :world)
    (send-robot 5000)
    ))

(defun set-balloon (goal_pos)
  (let* ((goal_pos (v- goal_pos #f(700 -613.427 0)))
	 (move_rot (atan (/ (elt goal_pos 1) (elt goal_pos 0))))
	 (move_len (norm (v- goal_pos (float-vector 0 0 (elt goal_pos 2)))))
	 (wall_distance)
	 (arm_end_pos))
    (format t "goal pos: ~A~%" goal_pos)
    (format t "move_rot: ~A, move_len: ~A~%" (/ (* 180 move_rot) pi) move_len)
    (go-vel-rotate move_rot)
    (go-vel-linear (/ move_len 1000) 3)
    (go-vel-rotate (* -1 move_rot))
    (rotate-ref-wall)
    (before-push-pose)
    ;; (setq wall_distance (get-distance-wall)) 
    ;; (go-vel-linear (- wall_distance 200) 2)
    ;; (setq arm_end_pos (get-arm-end-pos))
    ;; (send *fetch* :rarm :move-end-pos
    ;; 	  (float-vector 0 0 (- (elt goal_pos 2) (elt arm_end_pos 2))) :world)
    ;; (send-robot 4000)
    ;; (send *fetch* :rarm :move-end-pos #f(200 0 0) :world)
    ;; (send-robot 4000)
    ;; (send *ri* :stop-grasp)
    ;; (send *fetch* :rarm :move-end-pos #f(0 0 -100) :world)
    ;; (send-robot 1000)
    ;; (send *fetch* :rarm :move-end-pos #f(-200 0 0) :world)
    ;; (send-robot 1000)
    ))

(defun push-balloon-main ()
  (send *fetch* :head :look-at *look-at-pos*)
  (send-robot 4000)
  ;; set goal_pos
  (setq goal_pos (float-vector (get-distance-wall) 50 1000))
  (format t "goal_pos: ~A~%" goal_pos)
  (before-catch-pose)
  (send *ri* :speak-jp "風船を渡して下さい")
  (ros::duration-sleep 5.0)
  (catch-balloon 0.03)
  (before-push-pose)
  (set-balloon goal_pos)
  )

;; ... memo ... 
;; (send *ri* :stop-grasp)
;; (send *ri* :go-grasp :pos 0.05)
;; (send *ri* :gripper :position)
;; (send *fetch* :rarm :move-end-pos #f(0 0 10) :world)


;; after-catch
;; (send *fetch* :reset-pose)
;; (setq target_pos (make-coords :pos #f(800 0 600)))
;; (send *fetch* :inverse-kinematics target_pos)
