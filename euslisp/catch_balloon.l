#!/usr/bin/env roseus

(setq *CATCH-BALLOON-TH* 0.2)

(defun get-closest-box ()
  (let* ((pos) (xpos_lst '()) (closest_x) (closest_num 0) (center_box_info))
    (dotimes (i (length *catch-pos-lst*))
      (setq pos (elt *catch-pos-lst* i))
      (setq xpos_lst (append xpos_lst (list (elt pos 0)))))
    (setq xpos_lst (sort xpos_lst #'<=))
    (setq closest_x (elt xpos_lst 0))
    (dotimes (i (length *catch-pos-lst*))
      (setq pos (elt *catch-pos-lst* i))
      (when (= (elt pos 0) closest_x)
	(setq closest_num i)
	(setq closest_pos pos)))
    (format t "cbox ~A: ~A~%" closest_num closest_pos)
    (setq center_box_info (get-center-box))
    (when (< (abs (- (elt (elt center_box_info 1) 0) (elt closest_pos 0))) 100)
      (setq closest_num (elt center_box_info 0))
      (setq closest_pos (elt center_box_info 1)))
    (format t "cbox ~A: ~A~%" closest_num closest_pos)
    (list closest_num closest_pos))
  )

(defun get-center-box ()
  (let* ((center_num 0) (ypos_lst '()) (pos) (center_pos) (center_y))
    (dotimes (i (length *catch-pos-lst*))
      (setq pos (elt *catch-pos-lst* i))
      (setq ypos_lst (append ypos_lst (list (elt pos 1)))))
    (setq ypos_lst (sort ypos_lst #'<=))
    (setq center_y (elt ypos_lst (/ (length ypos_lst) 2)))
    (dotimes (i (length *catch-pos-lst*))
      (setq pos (elt *catch-pos-lst* i))
      (when (= (elt pos 1) center_y)
	(setq center_num i)
	(setq center_pos pos)))
    ;; (format t "center_num ~A~%" center_num)
    ;; (format t "center_pos ~A~%" center_pos)
    (list center_num center_pos))
  )

(defun set-before-catch-pose ()
  (inv-from-reset-pose #f(550 100 500))
  (send *fetch* :rarm :wrist-r :joint-angle -34.22)
  ;; (send-robot 4000)
  (send *ri* :stop-grasp)
  ;; arm_end_pos #f(550.048 100.282 500.078)
  )

(defun catch-balloon-manip (thresh retry_count)
  ;; thresh: diff between ideal and real [cm]
  (let* ((diff_width 0)
	 (real_width)
	 (ideal_width 0.1)
	 (grasp-result)
	 (retry_count retry_count))
    (while (and (< diff_width thresh) (> ideal_width 0))
      (setq ideal_width (- ideal_width 0.01))
      (setq grasp-result (send *ri* :go-grasp :pos ideal_width))
      (ros::duration-sleep 0.7)
      (setq real_width (send grasp-result :position))
      (setq diff_width (- real_width ideal_width))
      (format t "ideal: ~A, real: ~A~%" ideal_width real_width)
      (format t "diff_width: ~A~%" diff_width)
      )
    (when (and (< real_width 0.01) (< retry_count 1)) ;; ask for help from human
      (send *ri* :stop-grasp)
      (format t "風船を掴むのに失敗しました~%")
      (send *ri* :speak-jp "風船を掴めませんでした。渡してもらえませんか？")
      (send *fetch* :rarm :move-end-pos #f(0 0 100) :world)
      (send-robot 1000)
      (ros::duration-sleep 7)
      (catch-balloon-manip *CATCH-BALLOON-TH* 1))
    real_width)
  )

(defun before-push-pose ()
  (inv-from-reset-pose #f(400 -400 450))
  (send *fetch* :rarm :wrist-p :joint-angle 9)
  (send *fetch* :rarm :elbow-p :joint-angle 120)
  (send *fetch* :rarm :move-end-pos #f(300 0 0) :world)
  (send-robot 4000)
  (send *fetch* :rarm :move-end-pos #f(0 300 100) :world)
  (send-robot 3000)
  ;; (get-arm-end-pos) -> #f(399.369 -313.6 860.035)
  )

(defun listen-cb (msg)
  (if (> (length (send msg :transcript)) 0)
      (setq listen_flag 1))
  )

(defun catch-interact ()
  (format t "その風船を渡して下さい~%")
  (send *ri* :speak-jp "その風船を渡してくれませんか？渡し終わったら声をかけてくださいね")
  (setq listen_flag 0)
  (ros::subscribe "/speech_to_text"
		  speech_recognition_msgs::SpeechRecognitionCandidates #'listen-cb)
  (while (= listen_flag 0)
    (ros::spin-once)
    (ros::sleep))
  (ros::unsubscribe "/speech_to_text")
  (format t "ありがとうございます~%")
  (send *ri* :speak-jp "ありがとうございます")
  )

(defun before-catch (cbox_pos)
  (let* ((cbox_pos cbox_pos)
	 (arm_end_pos)
	 (move_y))
    (go-vel-linear (/ -150 1000.0) 1)
    (setq *close-deco-x* (- *close-deco-x* 150))
    (setq cbox_pos (v+ cbox_pos #f(150 0 0)))
    (set-before-catch-pose)
    (setq arm_end_pos (get-arm-end-pos))
    (send *fetch* :torso :waist-z :joint-angle
	  (+ (+ (- (elt cbox_pos 2) (elt arm_end_pos 2))
		(send *fetch* :torso :waist-z :joint-angle) 50)))
    (send-robot 4000)
    (setq move_y (- (elt cbox_pos 1) (elt arm_end_pos 1)))
    (setq ik_res (send *fetch* :rarm :move-end-pos (float-vector 0 move_y 0) :world))
    (while (not ik_res)
      (if (< move_y 0)
	  (setq move_y (+ move_y 50))
	(setq move_y (- move_y 50)))
      (setq ik_res (send *fetch* :rarm :move-end-pos (float-vector 0 move_y 0) :world)))
    (format t "move_y: ~A~%" move_y)
    (send-robot 1000)
    (send *fetch* :rarm :move-end-pos #f(100 0 0) :world)
    (send-robot 1000)
    (catch-interact)
    ))

(defun after-catch (hand_width)
  (let* ((wall_x) (rot_num)
	 (leave_x (* -1 *close-deco-x*))
	 (hand_width hand_width))
    (set-before-catch-pose)
    (send *ri* :go-grasp :pos hand_width)
    (send-robot 4000)
    (before-push-pose)
    (format t "leave_x: ~A~%" leave_x)
    (go-vel-linear (/ leave_x 1000.0) 1)
    ;; (setq rot_num (- (floor (/ *rotate-rad* (/ pi 4))) 1))
    (setq rot_num 4)
    (format t "rot_num: ~A~%" rot_num)
    (dotimes (i rot_num)
      (go-vel-rotate (* -1 (/ pi 4))))
    (ros::duration-sleep 1.0)
    (rotate-ref-wall 0.0)
    (setq wall_x (get-distance-wall 320 240))
    (format t "wall_x: ~A, *wall-x*: ~A~%" wall_x *wall-x*)
    (go-vel-linear (/ (- wall_x *wall-x*) 1000.0) 1)
    ))

(defun catch-balloon ()
  (let* ((cbox_num_pos (get-closest-box))
	 (cbox_pos (elt cbox_num_pos 1))
	 (hand_width))
    (setq *catch-box-num* (elt cbox_num_pos 0))
    (before-catch cbox_pos)
    (setq hand_width (catch-balloon-manip *CATCH-BALLOON-TH* 1))
    (after-catch hand_width)
    ))


;; --- old_func ---
(defun before-catch-old (cbox_num cbox_pos)
  (let* ((cbox_num cbox_num)
	 (cbox_pos cbox_pos)
	 (arm_end_pos) (move_y) (ik_res t)
	 (move_len) (move_rot))
    (go-vel-linear (/ -200 1000.0) 1)
    (setq *close-deco-x* (- *close-deco-x* 200))
    (setq cbox_pos (v+ cbox_pos #f(200 150 0)))
    (setq move_rot (atan (/ (elt cbox_pos 1) (elt cbox_pos 0))))
    (format t "move_rot: ~A~%" (* 180 (/ move_rot pi)))
    (go-vel-rotate move_rot)
    (set-before-catch-pose)
    (setq arm_end_pos (get-arm-end-pos))
    (send *fetch* :torso :waist-z :joint-angle
	  (+ (+ (- (elt cbox_pos 2) (elt arm_end_pos 2))
		(send *fetch* :torso :waist-z :joint-angle))
	     *CATCH-Z-OFFSET*))
    (send-robot 4000)
    (setq move_len (norm (float-vector
			  (- (elt cbox_pos 0) (elt arm_end_pos 0))
			  (- (elt cbox_pos 1) (elt arm_end_pos 1)) 0)))
    (format t "move_len: ~A~%" move_len)
    (go-vel-linear (/ (- move_len *CATCH-X-OFFSET*) 1000.0) 1)
    (send *fetch* :rarm :move-end-pos (float-vector *CATCH-X-OFFSET* 0 0) :world)
    (send-robot 2000)
    (withdraw-hand 0.01 (- (elt (get-arm-end-pos) 2) 50))
    (setq move_y -200)
    (setq ik_res (send *fetch* :rarm :move-end-pos (float-vector 0 move_y 0) :world))
    ;; (while (not ik_res)
      ;;(setq move_y (+ move_y 50))
    ;;  (setq ik_res (send *fetch* :rarm :move-end-pos (float-vector 0 move_y 0) :world)))
    (send-robot 2000)
    (list move_len move_rot))
  )

(defun after-catch-old (move_len move_rot)
  (let* ((wall_x) (rot_num)
	 (move_len (* -1 move_len))
	 (move_rot (* -1 move_rot))
	 (leave_x (* -1 *close-deco-x*)))
    (format t "go-vel-linear ~A~%" move_len)
    (go-vel-linear (/ move_len 1000.0) 1)
    (format t "go-vel-rotate ~A~%" (* 180 (/ move_rot pi)))
    (go-vel-rotate move_rot)
    (before-push-pose)
    (format t "leave_x: ~A~%" leave_x)
    (go-vel-linear (/ leave_x 1000.0) 1)
    (setq rot_num (- (floor (/ *rotate-rad* (/ pi 4))) 1))
    (format t "rot_num: ~A~%" rot_num)
    (dotimes (i rot_num)
      (go-vel-rotate (* -1 (/ pi 4))))
    (ros::duration-sleep 1.0)
    (rotate-ref-wall 0.0)
    (setq wall_x (get-distance-wall 320 240))
    (format t "wall_x: ~A, *wall-x*: ~A~%" wall_x *wall-x*)
    (go-vel-linear (/ (- wall_x *wall-x*) 1000.0) 1)
  ))

(defun withdraw-hand (thresh limit_height)
  (let* ((diff_z 0)
	 (real_z (elt (get-arm-end-pos) 2))
	 (ideal_z real_z))
    (format t "ideal_z: ~A, limit_h: ~A~%" ideal_z limit_height)
    (while (and (< diff_z thresh) (< limit_height ideal_z))
      (setq ideal_z (- ideal_z 5))
      (send *fetch* :rarm :move-end-pos #f(0 0 -5) :world)
      (send-robot 1000)
      (setq real_z (elt (get-arm-end-pos) 2))
      (setq diff_z (abs (- real_z ideal_z)))
      (format t "ideal: ~A, real: ~A~%" ideal_z real_z)
      (format t "diff_z: ~A~%" diff_z)
      )
    (send *fetch* :rarm :move-end-pos #f(0 0 50) :world)
    (send-robot 1000)
    ))
