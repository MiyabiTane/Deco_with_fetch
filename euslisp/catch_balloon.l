#!/usr/bin/env roseus

(setq *CATCH-X-OFFSET* 200)
(setq *CATCH-Z-OFFSET* 50)

(defun get-center-box-num ()
  (let* ((center_num 0) (ypos_lst '()) (pos) (center_pos) (center_y))
    (dotimes (i (length *catch-pos-lst*))
      (setq pos (elt *catch-pos-lst* i))
      (setq ypos_lst (append ypos_lst (list (elt pos 1)))))
    (setq ypos_lst (sort ypos_lst #'<=))
    (setq center_y (elt ypos_lst (/ (length ypos_lst) 2)))
    (dotimes (i (length *catch-pos-lst*))
      (setq pos (elt *catch-pos-lst* i))
      (when (= (elt pos 1) center_y)
	(setq center_num i)
	(setq center_pos pos)))
    ;; (format t "center_num ~A~%" center_num)
    ;; (format t "center_pos ~A~%" center_pos)
    (list center_num center_pos))
  )

(defun set-before-catch-pose ()
  (inv-from-reset-pose #f(550 100 500))
  (send *fetch* :rarm :wrist-r :joint-angle -34.22)
  ;; (send-robot 4000)
  (send *ri* :stop-grasp)
  )

(defun catch-balloon-manip (thresh)
  ;; thresh: diff between ideal and real [cm]
  (let* ((diff_width 0)
	 (real_width)
	 (ideal_width 0.1)
	 (grasp-result))
    (while (and (< diff_width thresh) (> ideal_width 0))
      (setq ideal_width (- ideal_width 0.01))
      (setq grasp-result (send *ri* :go-grasp :pos ideal_width))
      (ros::duration-sleep 0.7)
      (setq real_width (send grasp-result :position))
      (setq diff_width (- real_width ideal_width))
      (format t "ideal: ~A, real: ~A~%" ideal_width real_width)
      (format t "diff_width: ~A~%" diff_width)
      )
    ))

(defun before-push-pose ()
  (inv-from-reset-pose #f(400 -400 450))
  (send *fetch* :rarm :wrist-p :joint-angle 9)
  (send *fetch* :rarm :elbow-p :joint-angle 120)
  (send *fetch* :rarm :move-end-pos #f(300 0 0) :world)
  (send-robot 4000)
  (send *fetch* :rarm :move-end-pos #f(0 300 100) :world)
  (send-robot 3000)
  ;; (get-arm-end-pos) -> #f(399.369 -313.6 860.035)
  )

(defun before-catch (center_box_num center_box_pos)
  (let* ((center_box_num center_box_num)
	 (center_box_pos center_box_pos)
	 (arm_end_pos) (move_y) (ik_res t))
    (go-vel-linear (/ -500 1000.0) 1)
    (set-before-catch-pose)
    (setq arm_end_pos (get-arm-end-pos))
    (format t "center_box_pos ~A~%" center_box_pos)
    (format t "arm_end_pos ~A~%" arm_end_pos)
    (send *fetch* :torso :waist-z :joint-angle
	  (+ (+ (- (elt center_box_pos 2) (elt arm_end_pos 2))
		(send *fetch* :torso :waist-z :joint-angle))
	     *CATCH-Z-OFFSET*))
    (send-robot 4000)
    (go-vel-linear (/ 500 1000.0) 1)
    (format t "go-vel-linear ~A~%" (- (- (elt center_box_pos 0) (elt arm_end_pos 0)) *CATCH-X-OFFSET*))
    (go-vel-linear (/ (- (- (elt center_box_pos 0) (elt arm_end_pos 0)) *CATCH-X-OFFSET*) 1000.0) 1)
    (setq *close-deco-x* (+ *close-deco-x* (- (- (elt center_box_pos 0) (elt arm_end_pos 0)) *CATCH-X-OFFSET*)))
    (send *fetch* :rarm :move-end-pos (float-vector *CATCH-X-OFFSET* 0 0) :world)
    (send-robot 2000)
    (setq move_y (- (elt center_box_pos 1) (elt arm_end_pos 1)))
    (setq ik_res (send *fetch* :rarm :move-end-pos (float-vector 0 move_y 0) :world))
    (while (not ik_res)
      (if (< (- (elt center_box_pos 1) (elt arm_end_pos 1)) 0)
	  (setq move_y (+ move_y 100))
	(setq move_y (- move_y 100)))
      (setq ik_res (send *fetch* :rarm :move-end-pos (float-vector 0 move_y 0) :world)))
    (send-robot 2000)
    ))

(defun after-catch ()
  (let* ((wall_x))
    (go-vel-linear (/ -500 1000.0) 1)
    (before-push-pose)
    (format t "*close-deco-x*: ~A~%" *close-deco-x*)
    (go-vel-linear (* -1 (/ (- *close-deco-x* 500) 1000.0)) 1)
    (dotimes (i 5)
      (go-vel-rotate (* -1 (/ pi 4))))
    (rotate-ref-wall)
    (setq wall_x (get-distance-wall 320 240))
    (format t "wall_x: ~A, *wall-x*: ~A~%" wall_x *wall-x*)
    (go-vel-linear (/ (- wall_x *wall-x*) 1000.0) 1)
    ))

(defun catch-balloon ()
  (let* ((center_num_pos (get-center-box-num))
	 (center_box_pos (elt center_num_pos 1)))
    (setq *center-box-num* (elt center_num_pos 0))
    (before-catch *center-box-num* center_box_pos)
    (catch-balloon-manip 0.2)
    (after-catch)
    ))
