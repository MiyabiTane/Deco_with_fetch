#!/usr/bin/env roseus

(setq *status-req-topic* "/check_deco_status")


(defun get-corner-uv-wall (pos dims)
  (let* ((lt_pos) (rt_pos) (lb_pos) (rb_pos)
	 (lt_res) (rt_res) (lb_res) (rb_res)
	 (h_width (/ (elt dims 1) 2.0))
	 (h_length (/ (elt dims 2) 2.0))
	 (h_height (/ (elt dims 0) 2.0)))
    (setq lt_pos (v+ pos (float-vector (* -1 h_height) h_width h_length)))
    (setq rt_pos (v+ pos (float-vector (* -1 h_height) (* -1 h_width) h_length)))
    (setq lb_pos (v+ pos (float-vector (* -1 h_height) h_width (* -1 h_length))))
    (setq rb_pos (v+ pos (float-vector (* -1 h_height) (* -1 h_width) (* -1 h_length))))
    (setq lt_res (send (convert-3D->2D lt_pos) :point))
    (setq rt_res (send (convert-3D->2D rt_pos) :point))
    (setq lb_res (send (convert-3D->2D lb_pos) :point))
    (setq rb_res (send (convert-3D->2D rb_pos) :point))
    (list (list (send lt_res :x) (send rt_res :x) (send lb_res :x) (send rb_res :x))
	  (list (send lt_res :y) (send rt_res :y) (send lb_res :y) (send rb_res :y)))
    ))

(defun set-rec-uv-msg-box-on-wall ()
  (let* ((rec_uv_msg (instance jsk_recognition_msgs::PlotData :init))
	 (deco_box) (box_cd_lst) (pos) (dims) (xs_ys_lst))
    (find-boxes)
    (dolist (deco_box *bboxes*)
      (setq rec_uv_msg (instance jsk_recognition_msgs::PlotData :init))
      (setq box_cd_lst (bbox->lst deco_box))
      (setq pos (send (elt box_cd_lst 0) :pos))
      (setq dims (elt box_cd_lst 1))
      (format t "pos: ~A, dims: ~A~%" pos dims)
      (setq xs_ys_lst (get-corner-uv-wall pos dims))
      (send rec_uv_msg :xs (elt xs_ys_lst 0))
      (send rec_uv_msg :ys (elt xs_ys_lst 1))
      (send *status-req-msg* :decos_rec_uv
	    (append (send *status-req-msg* :decos_rec_uv) (list rec_uv_msg))))
    ))

(defun get-decorated-uv ()
  (let* ((image_raw_msg
	  (one-shot-subscribe *head-camera-img*
			      sensor_msgs::Image :after-stamp (ros::time-now)))
	 (xs_ys_lst)
	 (result_msg))
    (send *status-req-msg* :back_img image_raw_msg)
    (format t "deco-loop-num ~A, catch-box-num ~A~%"
	    *deco-loop-num* *catch-box-num*)
    (send *status-req-msg* :deco_count *deco-loop-num*)
    (send *status-req-msg* :box_num *catch-box-num*)
    (set-rec-uv-msg-box-on-wall)
    (format t "wating service ...~%")
    (ros::wait-for-service *status-req-topic*)
    (setq result_msg (ros::service-call *status-req-topic* *status-req-msg*))
    (format t "got service result~%")
    (format t "result ~A~%" (send result_msg :real_deco_uv))
    (send result_msg :real_deco_uv))
  )

(defun pointing-pos (target_pos)
  (let* ((target_pos target_pos)
	 (ref_vec (v- target_pos #f(50.4034 -127.561 787.276)))
	 (ref_vec (scale (/ 100.0 (norm ref_vec)) ref_vec))
	 (ik_res nil)
	 (offset_vec (scale
		      (/ (- (elt target_pos 0) 1100.0) (norm ref_vec)) ref_vec)))
    (setq target_pos (v- target_pos offset_vec))
    (format t "target_pos: ~A~%" target_pos)
    (while (and (not ik_res) (> (elt target_pos 0) 200))
      (setq ik_res (inv-from-reset-pose target_pos))
      (when (not ik_res)
	(setq target_pos (v- target_pos ref_vec))
	;; (view-debug-pos target_pos)
	))
    (send-robot 4000)
    ))

(defun print-check-result (result_lst)
  (let* ((result_lst result_lst) (result_msg)
	 (result_x) (result_y))
    (if (not result_lst)
	(format t "飾り付けに失敗しました~%")
      (progn
	(dotimes (i (length *place-pos-lst*))
	  (format t "= ~A~%" i)
	  (if (= i *catch-box-num*)
	      (format t "基準の飾り~%")
	    (progn
	      (setq result_msg (elt result_lst i))
	      (setq result_x (send result_msg :x))
	      (if (= result_x -1)
		  (format t "対応する飾りがありません~%")
		(progn
		  (setq result_y (send result_msg :y))
		  (format t "diff uv: ~A ~A~%" result_x result_y)
		  (format t " ideal 3d pos: ~A~%" (elt *place-pos-lst* i))
		  (setq result_3d_pos nil)
		  (while (not result_3d_pos)
		    (convert-2D->3D (send (elt result_lst i) :x) (send (elt result_lst i) :y) *wall-pcl*))
		  (format t " real 3d pos: ~A~%" result_3d_pos))))))
	))
    ))

(defun check-deco-diff (result_lst)
  (let* ((result_lst result_lst)
	 (ideal_pos) (real_pos))
    (when result_lst
      (dotimes (i (length *place-pos-lst*))
	(when (not (= i *catch-box-num*))
	  (when (not (= (send (elt result_lst i) :x) -1))
	    (setq ideal_pos (elt *place-pos-lst* i))
	    (convert-2D->3D (send (elt result_lst i) :x) (send (elt result_lst i) :y) *wall-pcl*)
	    (setq real_pos result_3d_pos)
	    (format t "real_pos: ~A~%" real_pos)
	    (format t "ideal_pos: ~A~%" ideal_pos)
	    (pointing-pos real_pos)
	    (format t "あの飾りは~%")
	    (ros::duration-sleep 3.0)
	    (pointing-pos ideal_pos)
	    (format t "あっちに置いてほしいです~%")
	    (ros::duration-sleep 3.0)))
	))
    ))

(defun check-decoration ()
  (let* ((result_lst))
    (setq result_lst (get-decorated-uv))
    (print-check-result result_lst)
    ;; (check-deco-diff result_lst)
    ))

(defun check-decoration-test ()
  (setq *place-pos-lst* (list #f(1906.57 344.389 1381.54) #f(2010.0 -728.395 766.317) #f(1895.04 464.742 481.844)))
  (setq *catch-box-num* 1)
  (setq *wall-pcl*
	(one-shot-subscribe *head-camera-points*
			    sensor_msgs::PointCloud2 :after-stamp (ros::time-now)))
  (check-decoration)
  )

(defun check-decoration-test ()
  ;; need to comment out (find-boxes) in (set-rec-uv-msg-box-on-wall) function
  (let* ((box_1) (box_2) (pose_msg))

    (defun make-box-msg (x y z w l h)
      (let* ((box_msg (instance jsk_recognition_msgs::BoundingBox :init))
	     (pose_msg (instance geometry_msgs::Pose :init))
	     (point_msg (instance geometry_msgs::Point :init))
	     (dims_msg (instance geometry_msgs::Vector3 :init))
	     (header_msg (instance std_msgs::Header :init)))
	(send header_msg :frame_id *camera-frame*)
	(send point_msg :x x)
	(send point_msg :y y)
	(send point_msg :z z)
	(send pose_msg :position point_msg)
	(send dims_msg :x w)
	(send dims_msg :y l)
	(send dims_msg :z h)
	(send box_msg :pose pose_msg)
	(send box_msg :dimensions dims_msg)
	(send box_msg :header header_msg)
	box_msg)
      )

    (set-sim)
    (init-global-param)
    (setq box_1 (make-box-msg -0.125280410051 0.0383248403668 0.981059074402
			      0.203686773777 0.174361869693 0.046837747097))
    (setq box_2 (make-box-msg 0.0115119814873 0.134560734034 0.987784326077
			      0.16269376874 0.169103443623 0.0320847630501))
    (setq *bboxes* (list box_1 box_2))
    (format t "bboxes: ~A~%" *bboxes*)
    (get-decorated-uv)
    ))
