#!/usr/bin/env roseus

(setq *status-req-topic* "/check_deco_status")


(defun get-corner-uv-wall (pos dims)
  (let* ((lt_pos) (rt_pos) (lb_pos) (rb_pos)
	 (lt_res) (rt_res) (lb_res) (rb_res)
	 (h_width (/ (elt dims 1) 2.0))
	 (h_length (/ (elt dims 0) 2.0))
	 (h_height (/ (elt dims 2) 2.0)))
    (setq lt_pos (v+ pos (float-vector (* -1 h_height) h_width h_length)))
    (setq rt_pos (v+ pos (float-vector (* -1 h_height) (* -1 h_width) h_length)))
    (setq lb_pos (v+ pos (float-vector (* -1 h_height) h_width (* -1 h_length))))
    (setq rb_pos (v+ pos (float-vector (* -1 h_height) (* -1 h_width) (* -1 h_length))))
    (setq lt_res (send (convert-3D->2D lt_pos) :point))
    (setq rt_res (send (convert-3D->2D rt_pos) :point))
    (setq lb_res (send (convert-3D->2D lb_pos) :point))
    (setq rb_res (send (convert-3D->2D rb_pos) :point))
    (list (list (send lt_res :x) (send rt_res :x) (send lb_res :x) (send rb_res :x))
	  (list (send lt_res :y) (send rt_res :y) (send lb_res :y) (send rb_res :y)))
    ))

(defun set-rec-uv-msg-box-on-wall ()
  (let* ((rec_uv_msg (instance jsk_recognition_msgs::PlotData :init))
	 (deco_box) (box_cd_lst) (pos) (dims) (xs_ys_lst))
    (find-boxes-on-wall)
    (dolist (deco_box *bboxes*)
      (setq rec_uv_msg (instance jsk_recognition_msgs::PlotData :init))
      (setq box_cd_lst (bbox->lst deco_box))
      (setq pos (send (elt box_cd_lst 0) :pos))
      (setq dims (elt box_cd_lst 1))
      (format t "pos: ~A, dims: ~A~%" pos dims)
      (setq xs_ys_lst (get-corner-uv-wall pos dims))
      (send rec_uv_msg :xs (elt xs_ys_lst 0))
      (send rec_uv_msg :ys (elt xs_ys_lst 1))
      (send *status-req-msg* :decos_rec_uv
	    (append (send *status-req-msg* :decos_rec_uv) (list rec_uv_msg))))
    ))

(defun set-pub-ga-info ()
  (let* ((point_msg))
    (dolist (ga_pos *place-uv-pos-lst*)
      (setq point_msg  (instance geometry_msgs::Point :init))
      (send point_msg :x (elt ga_pos 0))
      (send point_msg :y (elt ga_pos 1))
      (send *status-req-msg* :ga_calc_uv
	    (append (send *status-req-msg* :ga_calc_uv) (list point_msg))))
    ))

(defun get-decorated-uv ()
  (let* ((image_raw_msg
	  (one-shot-subscribe *head-camera-img*
			      sensor_msgs::Image :after-stamp (ros::time-now)))
	 (xs_ys_lst)
	 (result_msg))
    (send *status-req-msg* :back_img image_raw_msg)
    (format t "deco-loop-num ~A, catch-box-num ~A~%"
	    *deco-loop-num* *catch-box-num*)
    (send *status-req-msg* :deco_count *deco-loop-num*)
    (send *status-req-msg* :box_num *catch-box-num*)
    (set-rec-uv-msg-box-on-wall)
    (set-pub-ga-info)

    (print-status-check-pub-info)
    (format t "wating service ...~%")
    (ros::wait-for-service *status-req-topic*)
    (setq result_msg (ros::service-call *status-req-topic* *status-req-msg*))
    (format t "got service result~%")
    (format t "result ~A~%" (send result_msg :ideal_deco_uv))
    (send result_msg :ideal_deco_uv))
  )

(defun print-status-check-pub-info ()
  (let* ((deco_count (send *status-req-msg* :deco_count))
	 (box_num (send *status-req-msg* :box_num))
	 (ga_calc_uv (send *status-req-msg* :ga_calc_uv))
	 (decos_rec_uv (send *status-req-msg* :decos_rec_uv)))
    (format t "~%")
    (format t "- deco_count ~A~%" deco_count)
    (format t "- box_num ~A~%" box_num)
    (format t "- ga_calc_uv~%")
    (dolist (ga_uv ga_calc_uv)
      (format t "  - ~A ~A~%" (send ga_uv :x) (send ga_uv :y)))
    (format t "- decos_rec_uv~%")
    (dolist (deco_uv decos_rec_uv)
      (format t "  - xs: ~A~%" (send deco_uv :xs))
      (format t "  - ys: ~A~%" (send deco_uv :ys)))
    ))

(defun print-check-result (result_lst)
  (let* ((result_lst result_lst)
	 (box_cd_lst) (cur_pos) (ideal_pos)
	 (result_msg) (ideal_u) (ideal_v))
    (when (not result_lst)
      (format t "飾り付けに失敗しました~%"))
    (when result_lst
      (dotimes (i (length *bboxes*))
	(setq box_cd_lst (bbox->lst (elt *bboxes* i)))
	(setq cur_pos (send (elt box_cd_lst 0) :pos))
	(format t "= cur_pos: ~A~%" cur_pos)
	(setq result_msg (elt result_lst i))
	(setq ideal_u (send result_msg :x))
	(setq ideal_v (send result_msg :y))
	(format t "u: ~A, v: ~A, flag: ~A~%" ideal_u ideal_v (send result_msg :z))
	(when (not (= ideal_u -1))
	  (setq result_3d_pos nil)
	  (while (not result_3d_pos)
	    (convert-2D->3D ideal_u ideal_v *wall-pcl*))
	  (format t "= ideal_pos: ~A~%" result_3d_pos))
	))
    ))

(defun check-decoration ()
  (setq *deco-result-lst* (get-decorated-uv))
  (print-check-result *deco-result-lst*)
  )

(defun check-decoration-test ()
  ;; need to comment out (find-boxes) in (set-rec-uv-msg-box-on-wall) function
  (let* ((box_1) (box_2) (pose_msg))

    (defun make-box-msg (x y z w l h)
      (let* ((box_msg (instance jsk_recognition_msgs::BoundingBox :init))
	     (pose_msg (instance geometry_msgs::Pose :init))
	     (point_msg (instance geometry_msgs::Point :init))
	     (dims_msg (instance geometry_msgs::Vector3 :init))
	     (header_msg (instance std_msgs::Header :init)))
	(send header_msg :frame_id *camera-frame*)
	(send point_msg :x x)
	(send point_msg :y y)
	(send point_msg :z z)
	(send pose_msg :position point_msg)
	(send dims_msg :x w)
	(send dims_msg :y l)
	(send dims_msg :z h)
	(send box_msg :pose pose_msg)
	(send box_msg :dimensions dims_msg)
	(send box_msg :header header_msg)
	box_msg)
      )

    (defun set-rec-uv-msg-box-on-wall ()
      (let* ((rec_uv_msg (instance jsk_recognition_msgs::PlotData :init))
	     (deco_box) (box_cd_lst) (pos) (dims) (xs_ys_lst))
	(dolist (deco_box *bboxes*)
	  (setq rec_uv_msg (instance jsk_recognition_msgs::PlotData :init))
	  (setq box_cd_lst (bbox->lst deco_box))
	  (setq pos (send (elt box_cd_lst 0) :pos))
	  (setq dims (elt box_cd_lst 1))
	  (format t "pos: ~A, dims: ~A~%" pos dims)
	  (setq xs_ys_lst (get-corner-uv-wall pos dims))
	  (send rec_uv_msg :xs (elt xs_ys_lst 0))
	  (send rec_uv_msg :ys (elt xs_ys_lst 1))
	  (send *status-req-msg* :decos_rec_uv
		(append (send *status-req-msg* :decos_rec_uv) (list rec_uv_msg))))
	))

    (set-sim)
    (init-global-param)
    (setq *wall-pcl*
	  (one-shot-subscribe *head-camera-points*
			      sensor_msgs::PointCloud2 :after-stamp (ros::time-now)))
    (setq box_1 (make-box-msg -0.125280410051 0.0383248403668 0.981059074402
			      0.203686773777 0.174361869693 0.046837747097))
    (setq box_2 (make-box-msg 0.0115119814873 0.134560734034 0.987784326077
			      0.16269376874 0.169103443623 0.0320847630501))
    (setq *bboxes* (list box_1 box_2))
    (format t "bboxes: ~A~%" *bboxes*)
    (setq *place-uv-pos-lst* (list (list 232 116) (list 344 260) (list 275 245)))
    (setq *catch-box-num* 1)
    (check-decoration)
    ))

(defun check_deco_status_pub_test ()
  (let* ((rec_uv_msg (instance jsk_recognition_msgs::PlotData :init))
	 (point_msg (instance geometry_msgs::Point :init))
	 (ga_calc_uv_lst '())
	 (decos_rec_uv_lst '())
	 (ga_calc_uv_pub (list #f(422.0 222.0) #f(494.0 228.0)))
	 (decos_rec_uv_pub_xs (list (list 278.64 347.912 277.149 346.228)
				    (list 431.67 520.577 430.642 518.834)
				    (list 397.538 459.921 396.859 459.077)))
	 (decos_rec_uv_pub_ys (list (list 316.298 316.455 460.445 460.834)
				    (list 226.146 227.512 318.003 318.767)
				    (list 115.793 116.818 182.631 183.343))))
    (setq *status-req-msg* (instance deco_with_fetch::DecoStatusRequest :init))
    (send *status-req-msg* :deco_count 1)
    (send *status-req-msg* :box_num 1)
    (dolist (uv ga_calc_uv_pub)
      (setq point_msg (instance geometry_msgs::Point :init))
      (send point_msg :x (elt uv 0))
      (send point_msg :y (elt uv 1))
      (setq ga_calc_uv_lst (append ga_calc_uv_lst (list point_msg))))
    (dotimes (i (length decos_rec_uv_pub_xs))
      (setq rec_uv_msg (instance jsk_recognition_msgs::PlotData :init))
      (send rec_uv_msg :xs (elt decos_rec_uv_pub_xs i))
      (send rec_uv_msg :ys (elt decos_rec_uv_pub_ys i))
      (setq decos_rec_uv_lst (append decos_rec_uv_lst (list rec_uv_msg))))
    (send *status-req-msg* :ga_calc_uv ga_calc_uv_lst)
    (send *status-req-msg* :decos_rec_uv decos_rec_uv_lst)
    (format t "wating service ...~%")
    (ros::wait-for-service *status-req-topic*)
    (setq result_msg (ros::service-call *status-req-topic* *status-req-msg*))
    (format t "got service result~%")
    (format t "result ~A~%" (send result_msg :ideal_deco_uv))
    ))
